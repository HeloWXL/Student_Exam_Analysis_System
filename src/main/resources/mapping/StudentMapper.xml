<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mac.demo.mapper.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.mac.demo.model.Student" >
    <id column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="student_phone" property="studentPhone" jdbcType="VARCHAR" />
    <result column="student_name" property="studentName" jdbcType="VARCHAR" />
    <result column="student_password" property="studentPassword" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    student_id, student_phone, student_name, student_password, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
    where student_id = #{studentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where student_id = #{studentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.mac.demo.model.Student" >
    insert into student (student_id, student_phone, student_name, 
      student_password, create_time)
    values (#{studentId,jdbcType=INTEGER}, #{studentPhone,jdbcType=VARCHAR}, #{studentName,jdbcType=VARCHAR}, 
      #{studentPassword,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.mac.demo.model.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="studentPhone != null" >
        student_phone,
      </if>
      <if test="studentName != null" >
        student_name,
      </if>
      <if test="studentPassword != null" >
        student_password,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="studentPhone != null" >
        #{studentPhone,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentPassword != null" >
        #{studentPassword,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mac.demo.model.Student" >
    update student
    <set >
      <if test="studentPhone != null" >
        student_phone = #{studentPhone,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentPassword != null" >
        student_password = #{studentPassword,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mac.demo.model.Student" >
    update student
    set student_phone = #{studentPhone,jdbcType=VARCHAR},
      student_name = #{studentName,jdbcType=VARCHAR},
      student_password = #{studentPassword,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>

  <select id="getStudentByCondition" parameterType="com.mac.demo.vo.QueryStudentVo"
          resultType="com.mac.demo.model.Student">

    SELECT
    P2.student_id	as	studentId
    ,P2.student_phone as studentPhone
    ,P2.student_name as studentName
    ,P2.student_password as studentPassword
    ,P2.create_time as createTime

    FROM student  P2
    WHERE 1=1

    <if test="studentName != null and studentName != ''">
      and P2.student_name like concat('%',#{studentName}, '%')
    </if>
    <if test="studentPhone != null and studentPhone != ''">
      and P2.student_phone like concat('%',#{studentPhone}, '%')
    </if>
    LIMIT #{page},#{limit}
  </select>

  <select id="getStudentByConditionCount" resultType="java.lang.Integer">
     select
     count(1)
    FROM student  P2
    WHERE 1=1
    <if test="studentName != null and studentName != ''">
      and P2.student_name like concat('%',#{studentName}, '%')
    </if>
    <if test="studentPhone != null and studentPhone != ''">
      and P2.student_phone like concat('%',#{studentPhone}, '%')
    </if>

  </select>
</mapper>